<documentation>
    <module name="rpn_tree_processor">
        <description>
            Обрабатывает арифметическое выражение в обратной польской записи (RPN) из файла.
            Строит бинарное дерево, заменяет узлы с операциями деления (/) и остатка (%) на вычисленные значения,
            выводит структуру деревьев и указатель на корень преобразованного дерева.
            Операции кодируются через словарь op_codes:
            + → -1, - → -2, * → -3, / → -4, % → -5, ^ → -6.
        </description>

        <class name="Node">
            <description>Узел бинарного дерева. Хранит числовое значение (операнд или код операции) и ссылки на потомков.</description>
            <method name="__init__">
                <parameters>
                    <parameter name="value" type="int">Числовое значение (операнд или код из op_codes).</parameter>
                </parameters>
                <description>Инициализирует узел с заданным значением. Левый и правый потомки инициализируются как None.</description>
            </method>
        </class>

        <variables>
            <variable name="op_codes">
                <type>dict</type>
                <description>Сопоставляет операторы с кодами: {'+': -1, '-': -2, '*': -3, '/': -4, '%': -5, '^': -6}.</description>
            </variable>
        </variables>

        <functions>
            <function name="build_rpn_tree">
                <parameters>
                    <parameter name="tokens" type="list">Список токенов RPN (например, ["3", "4", "+"]).</parameter>
                </parameters>
                <returns type="Node">Корень построенного дерева.</returns>
                <description>
                    Строит дерево по алгоритму обратной польской записи. Операнды добавляются как листья, операторы
                    создают узлы с двумя предыдущими значениями из стека. Использует словарь op_codes для определения кодов операций.
                </description>
                <raises>
                    <exception type="ValueError">При обнаружении неизвестного оператора.</exception>
                </raises>
            </function>

            <function name="evaluate">
                <parameters>
                    <parameter name="node" type="Node">Корень поддерева.</parameter>
                </parameters>
                <returns type="int">Результат вычисления.</returns>
                <description>
                    Рекурсивно вычисляет значение поддерева. Для узлов-операций использует op_codes
                    для определения арифметической операции между результатами левого и правого поддеревьев.
                </description>
            </function>

            <function name="replace_div_mod">
                <parameters>
                    <parameter name="node" type="Node">Корень исходного дерева.</parameter>
                </parameters>
                <returns type="Node">Корень нового дерева.</returns>
                <description>
                    Рекурсивно заменяет все узлы с операциями / (код -4) и % (код -5) на узлы-листья
                    с вычисленными значениями (через evaluate). Возвращает новое дерево.
                </description>
            </function>

            <function name="print_tree">
                <parameters>
                    <parameter name="node" type="Node">Корень дерева.</parameter>
                    <parameter name="level" type="int" default="0">Уровень вложенности (для отступов).</parameter>
                </parameters>
                <description>Выводит дерево в консоль в псевдографическом виде (правые поддеревья сверху).</description>
            </function>

            <function name="main">
                <description>
                    Читает выражение из файла, вызывает построение дерева, преобразование, вывод результатов.
                    Обрабатывает ошибки: отсутствие файла, некорректные операторы, пустой ввод.
                </description>
            </function>
        </functions>

        <usage>
            <example>
                Поместите RPN-выражение в файл 'filename'. Пример содержимого файла:
                3 4 + 2 *
                Запустите скрипт. Результат:
                - Исходное дерево
                - Дерево после замены / и %
                - Адрес корня нового дерева.
            </example>
        </usage>
    </module>
</documentation>