<documentation>
    <module name="rpn_tree_processor">
        <description>
            В текстовом файле с именем filename дано арифметическое выражение в
            обратной польской записи. Операндами в выражении являются целые числа из
            промежутка от 0 до 9. Используемые операции: сложение (+), вычитание (-), умножение
            (*), деление нацело (/) и целочисленный остаток от деления (%) и возведение в степень (^).
            Постройте дерево, соответствующее данному выражению. Знаки операций кодируйте
            числами: сложение (-1), вычитание (-2), умножение (-3), деление нацело (-4),
            целочисленный остаток от деления (-5), возведение в степень (-6). Преобразуйте дерево
            так, чтобы в нем не было операции деления Иными словами, замените поддеревья, в
            которых есть операции / или %, значением данного поддерева. Выведите указатель на
            корень полученного дерева.
        </description>

        <class name="Node">
            <description>Узел бинарного дерева, хранящий значение и ссылки на левого и правого потомков.</description>
            <method name="__init__">
                <parameters>
                    <parameter name="value" type="int">Числовое значение узла (операнд или код операции).</parameter>
                </parameters>
                <description>Инициализирует узел с заданным значением и пустыми потомками.</description>
            </method>
        </class>

        <functions>
            <function name="build_rpn_tree">
                <parameters>
                    <parameter name="tokens" type="list">Список токенов выражения в RPN (числа и операторы).</parameter>
                </parameters>
                <returns type="Node">Указатель на корень построенного дерева.</returns>
                <description>
                    Строит бинарное дерево на основе обратной польской записи. Операнды добавляются в стек,
                    операторы создают узлы с двумя предыдущими операндами из стека. Коды операций:
                    + → -1, - → -2, * → -3, / → -4, % → -5, ^ → -6.
                </description>
                <raises>
                    <exception type="ValueError">При неизвестном операторе.</exception>
                </raises>
            </function>

            <function name="evaluate">
                <parameters>
                    <parameter name="node" type="Node">Корень поддерева для вычисления.</parameter>
                </parameters>
                <returns type="int">Результат вычисления поддерева.</returns>
                <description>
                    Рекурсивно вычисляет значение поддерева. Для операторов вызывает соответствующую
                    арифметическую операцию над результатами вычисления левого и правого поддеревьев.
                </description>
            </function>

            <function name="replace_div_mod">
                <parameters>
                    <parameter name="node" type="Node">Корень дерева для преобразования.</parameter>
                </parameters>
                <returns type="Node">Указатель на корень преобразованного дерева.</returns>
                <description>
                    Заменяет все узлы с операциями деления (/) и остатка (%) на узлы с вычисленными значениями.
                    Рекурсивно обрабатывает левое и правое поддеревья.
                </description>
            </function>

            <function name="print_tree">
                <parameters>
                    <parameter name="node" type="Node">Корень дерева для вывода.</parameter>
                    <parameter name="level" type="int" default="0">Текущий уровень вложенности (для форматирования).</parameter>
                </parameters>
                <description>Рекурсивно выводит структуру дерева в консоль с отступами.</description>
            </function>

            <function name="main">
                <description>
                    Основная функция: читает выражение из файла, строит дерево, преобразует его,
                    выводит исходное и измененное дерево, а также указатель на новый корень.
                    Обрабатывает ошибки чтения файла и другие исключения.
                </description>
            </function>
        </functions>

        <usage>
            <example>
                Для использования задайте имя файла в переменной `filename` в функции `main`.
                Запустите скрипт: структура деревьев будет выведена в консоль.
            </example>
        </usage>
    </module>
</documentation>